import tester.Tester;

//a list of strings
interface ILoString {

}

//an empty list of strings
class MtLoString implements ILoString {

}

//a non-empty list of strings
class ConsLoString implements ILoString {

}

//a list of trigrams
interface ILoTrigram {
  // returns the count of the given trigram in this list
  int count(Trigram trigram);

  // returns the most common Trigram in this list
  Trigram mostCommonTrigram();

  // returns the most common Trigram in this list
  // ACCUMULATORS: mostCommonSoFar represents the most common trigram so far,
  // highestCount represents the count of that trigram
  Trigram mostCommonTrigramAcc(Trigram mostCommonSoFar, int highestCount);
}

//an empty list of trigrams
class MtLoTrigram implements ILoTrigram {
  // returns the count of the given trigram in this empty list (always 0)
  public int count(Trigram trigram) {
    return 0;
  }

  // returns the most common Trigram in this empty list,always NO SUCH TRIGRAM
  public Trigram mostCommonTrigram() {
    return new Trigram("NO", "SUCH", "TRIGRAM");
  }

  // returns the most common Trigram in this empty list, always returns the most
  // common so far
  // ACCUMULATORS: mostCommonSoFar represents the most common trigram so far,
  // highestCount represents the count of that trigram
  public Trigram mostCommonTrigramAcc(Trigram mostCommonSoFar, int highestCount) {

  }

}

//a non-empty list of trigrams
class ConsLoTrigram implements ILoTrigram {
  Trigram first;
  ILoTrigram rest;

  // creates a new cons list with the given first trigram and rest of list
  ConsLoTrigram(Trigram first, ILoTrigram rest) {
    this.first = first;
    this.rest = rest;
  }

  public Trigram mostCommonTrigram() {

  }

  // returns the count of the given trigram in this cons list
  public int count(Trigram trigram) {
    if (this.first.compareTo(trigram) == 0) {
      return 1 + this.rest.count(trigram);
    }
    return this.rest.count(trigram);
  }

}

class Trigram {
  String first;
  String second;
  String third;

  // creates a trigram with the given first, second and third words
  Trigram(String first, String second, String third) {
    this.first = first;
    this.second = second;
    this.third = third;
  }

  // returns a negative number if this Trigram comes before the other Trigram, a
  // positive number if this Trigram comes after the other Trigram, and zero if
  // they are the same trigram (lexicographically and case-insensitively)
  int compareTo(Trigram other) {
    int compareFirst = this.first.compareToIgnoreCase(other.first);
    if (compareFirst != 0) {
      return compareFirst;
    }
    int compareSecond = this.second.compareToIgnoreCase(other.second);
    if (compareSecond != 0) {
      return compareSecond;
    }
    return this.third.compareToIgnoreCase(other.third);
  }
}

class ExamplesTrigrams {
  Trigram trigramFundies = new Trigram("I", "Love", "Fundies");
  Trigram trigramUS = new Trigram("United", "States", "America");
  Trigram trigramUs = new Trigram("united", "states", "america");
  Trigram trigramUAE = new Trigram("United", "Arab", "Emirates");
  Trigram trigramAf = new Trigram("United", "States", "Africa");
  Trigram trigramZoo = new Trigram("Zebras", "love", "lions");

  // tests the compareTo method on the Trigram class
  boolean testCompareTo(Tester t) {
    return t.checkExpect(trigramFundies.compareTo(trigramUS) < 0, true)
        && t.checkExpect(trigramUS.compareTo(trigramFundies) > 0, true)
        && t.checkExpect(trigramUS.compareTo(trigramZoo) < 0, true)
        && t.checkExpect(trigramUS.compareTo(trigramUAE) > 0, true)
        && t.checkExpect(trigramUAE.compareTo(trigramUS) < 0, true)
        && t.checkExpect(trigramUS.compareTo(trigramAf) > 0, true)
        && t.checkExpect(trigramAf.compareTo(trigramUS) < 0, true)
        && t.checkExpect(trigramUS.compareTo(trigramUS), 0)
        && t.checkExpect(trigramUS.compareTo(trigramUs), 0);
  }

  ILoTrigram empty = new MtLoTrigram();

  ILoTrigram longList = new ConsLoTrigram(trigramUS,
      new ConsLoTrigram(trigramUS, new ConsLoTrigram(trigramUAE,
          new ConsLoTrigram(trigramUS, new ConsLoTrigram(trigramUAE, new MtLoTrigram())))));

  boolean testCount(Tester t) {
    return t.checkExpect(empty.count(trigramUS), 0)//
        && t.checkExpect(longList.count(trigramUS), 3)
        && t.checkExpect(longList.count(trigramUAE), 2)
        && t.checkExpect(longList.count(trigramZoo), 0);
  }
}